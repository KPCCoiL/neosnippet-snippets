include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> 

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    } catch (${2:e:xception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:) {}
    for (${1:auto&& } ${2:var} : ${3:container}) {
        ${0:TARGET}
    }
    
snippet     for_CPP11_2
abbr        for (:)
    for (${1:auto&& } ${2:var} : ${3:container}) ${0:TARGET}

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     cout
options     head
  cout << ${0:TARGET} << endl;

snippet     puts
abbr        puts()
  puts(${0:TARGET})

snippet     ifstream
abbr        ifstream()
options     head
    ifstream ifs(${1:filename})
    
snippet     ofstream
abbr ofstream()
options     head
    ofstram ofs(${1:filename})
    
#container libs

snippet     vector
options     word
abbr        vector<>
    vector<${1:type}>${0}
    
snippet     queue
options     word
abbr        queue<>
    queue<${1:type}>${0}

snippet     map
options     word
abbr        map<>
    map<${1:type1},${2:type2}>${0}
    
snippet     stack
options     word
abbr        stack<>
    stack<${1:type}>${0}
    
snippet     deque
options     word
abbr        deque<>
    deque<${1:type}>${0}

snippet     list
options     word
abbr        list<>
    list<${1:type}>${0}

snippet     multiset
options     word
abbr        multiset<>
    multiset<${1:type}>${0}

snippet     set
options     word
abbr        set<>
    set<${1:type}>${0}

snippet     multimap
options     word
abbr        multimap<>
    multimap<${1:type}>${0}

snippet     bitset
options     word
abbr        bitset<>
    bitset<${1:size}>${0}

#C++11 features

snippet     unordered_map
options     word
alias       hash
abbr        unordered_map<>
    unordered_map<${1:type},${2:type}>${0}
    
snippet     array
options     word
abbr        array<>
    array<${1:type},${2:size}>${0}
    
snippet     forward_list
options     head
abbr        forward_list<>
    forward_list<${1:type}>${0}
    
snippet     tuple
abbr        tuple<>
    tuple<${1:type}>${0}
   
snippet     emplace
options     word
    emplace(${1})
    
snippet     emplace_back
options     word
    emplace_back(${1})

#macros for competive programming

snippet     memset
abbr        memset()
    memset(${1},${2},sizeof $1)${0}
    
snippet     vector<vector<int>>
abbr        vector<vector<int>>
alias       vvi
    vector<vector<int>>
    
snippet     dxdy
abbr        dx[]={},dy[]={}
    constexpr int dx[]={0,-1,1,0},dy[]={1,0,0,-1}
    
snippet     push_back
options     word
alias       pb
abbr        push_back()
    push_back(${1})
    
snippet     push
options     word
abbr        push()
    push(${1})

snippet     all
options     word
abbr        a.begin(),a.end()
    ${1:container}.begin(),$1.end()${0}
