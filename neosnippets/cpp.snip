include c.snip

include battle_cpp.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"
    
snippet incall
    #include <bits/stdc++.h>

snippet     template
abbr        template <>
    template <${1:Param}>
    
snippet     metafunc
abbr        template<>struct{}
    template<${1:Param}>
    struct ${2:Name} {
        static const ${3:Val}
    };

snippet     class
abbr        class {}
    class ${1:#:name} {
            ${2}
        public:
            $1(${3}) ${4}{
                ${0:TARGET}
            }
    };

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    } catch (${2:e:xception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:)
    for (auto& ${1:var} : ${2:container}) ${0:TARGET}

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [&](${1}) {${2:TARGET}}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert(${1}, "${2}");${0}

delete      namespace
snippet     namespace
abbr        namespace {}
options     head
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
options     word
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     cout
options     head
  cout << ${0:TARGET} << endl;

snippet     puts
abbr        puts()
  puts(${0:TARGET})

snippet     ifstream
abbr        ifstream()
options     head
    ifstream ifs(${1:filename})
    
snippet     ofstream
abbr ofstream()
options     head
    ofstram ofs(${1:filename})
    
#container libs

snippet     vector
options     word
abbr        vector<>
    vector<${1:type}>${0}
    
snippet     queue
options     word
abbr        queue<>
    queue<${1:type}>${0}

snippet     map
options     word
abbr        map<>
    map<${1:type1},${2:type2}>${0}
    
snippet     stack
options     word
abbr        stack<>
    stack<${1:type}>${0}
    
snippet     deque
options     word
abbr        deque<>
    deque<${1:type}>${0}

snippet     list
options     word
abbr        list<>
    list<${1:type}>${0}

snippet     multiset
options     word
abbr        multiset<>
    multiset<${1:type}>${0}

snippet     set
options     word
abbr        set<>
    set<${1:type}>${0}

snippet     multimap
options     word
abbr        multimap<>
    multimap<${1:type}>${0}

snippet     bitset
options     word
abbr        bitset<>
    bitset<${1:size}>${0}
    
snippet     pair
options     word
abbr        pair<>
    pair<${1:type1}, ${2:type2}>${0}
    
snippet     priority_queue
options     word
alias       pque
abbr        priority_queue<>
    priority_queue<${1:type}>${0}
    
snippet     pque2
abbr        priority_queue<T,vector<T>,greater<T>>
    priority_queue<${1:type}, vector<$1>, greater<$1>>${0}

#C++11 features

snippet     unordered_map
options     word
alias       hash
abbr        unordered_map<>
    unordered_map<${1:type}, ${2:type}>${0}
    
snippet     unordered_set
options     word
abbr        unordered_set<>
    unordered_set<${1:type}>${0}

snippet     array
options     word
abbr        array<>
    array<${1:type}, ${2:size}>${0}
    
snippet     forward_list
options     head
abbr        forward_list<>
    forward_list<${1:type}>${0}
    
snippet     tuple
abbr        tuple<>
    tuple<${1:type}>${0}
   
snippet     emplace
options     word
alias       emp
    emplace(${1})${0}
    
snippet     emplace_back
options     word
    emplace_back(${1})${0}

#macros for competitive programming

snippet     memset
abbr        memset()
    memset(${1}, ${2}, sizeof $1);${0}
    
snippet     debug
    cerr << "${1:var} = " << $1 << endl;${0}
    
snippet     prArr
abbr        for(:)cout<<i<<'';
    for (auto i : ${1:container})
        cout << i << ' ';
    cout << endl;${0}
    
snippet     fastIO
options     head
alias       ios_base
    ios_base::sync_with_stdio(0); cin.tie(0);
    
snippet     vector<vector<>>
abbr        vector<vector<>>
options     word
alias       vv
    vector<vector<${1:type}>>${0}
    
snippet     dxdy
abbr        dx[]={},dy[]={}
    constexpr int dx[]={0, -1, 1, 0}, dy[]={1, 0, 0, -1};
    
snippet     push_back
options     word
alias       pb
abbr        push_back()
    push_back(${1})${0}
    
snippet     push
options     word
abbr        push()
    push(${1})${0}
    
snippet      push_front
options     word
abbr        push_front()
    push_front(${1})${0}

snippet     all
options     word
abbr        a.begin(),a.end()
    begin(${1:container}), end($1)${0}

snippet     rall
options     word
abbr        a.rbegin(),a.rend()
    rbegin(${1:container}), rend($1)${0}

snippet     unique
options     word
abbr        erase(unique())
    ${1}.erase($1.unique(begin($1), end($1)), end($1))${0}
    
snippet     exist
options     word
abbr        find()!=end()
    ${1}.find(${2}) != end($1)${0}
    
snippet     unless
options     head
abbr        if(!())
    if(!(${1})) ${0}

snippet     inrange
options     word
abbr        x>=0&&x<N
    ${1} >= 0 && $1 < ${2}
